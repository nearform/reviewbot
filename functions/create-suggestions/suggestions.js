async function callChatGPTService(payload) {
  const apiUrl = 'https://api.openai.com/v1/chat/completions'
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${process.env.CHAT_GPT_API_KEY}`
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: payload,
      max_tokens: 512
    })
  })
  const body = await response.json()
  return body
}

/**
  Calls a transformer service to generate suggestions based on a given set of prompts.
  @param {Object} - The object containing the transformer type and payload.
  @param {string} transformerType - The type of transformer service to use.
  @param {Object[]} payload - The payload containing prompts for the transformer service.
  @returns {Promise<string[]>} - A promise that resolves to an array of suggestions generated by the transformer service.
  @throws {Error} If an error occurs while calling the transformer service.
**/
async function generateSuggestions({ transformerType, payload }) {
  switch (transformerType) {
    case 'chatGPT': {
      try {
        const prompts = payload.map(file => callChatGPTService(file.prompt))
        if (prompts.length === 0) {
          return []
        }
        const suggestions = await Promise.all(prompts)
        console.log('[reviewbot] - getting suggestions', suggestions)
        return suggestions.map(s =>
          s.choices.map(choice => choice.message.content.trim()).join('')
        )
      } catch (error) {
        throw new Error(`received error from chatGPT API + ${error.message}`)
      }
    }
  }
}

export default generateSuggestions
