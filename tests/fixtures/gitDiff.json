[
  {
    "added": false,
    "deleted": false,
    "beforeName": ".eslintrc",
    "afterName": ".eslintrc",
    "modifiedLines": [
      {
        "added": false,
        "lineNumber": 12,
        "line": "  \"ignorePatterns\": [\"dist/**\"]"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "  \"ignorePatterns\": [\"dist/**\", \"functions/createReview/astParsing/rules/*.example.js\"]"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/index.js",
    "afterName": "functions/createReview/astParsing/index.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "import { Parser } from 'acorn'"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": "// import tsPlugin from 'acorn-typescript'"
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "// import { LooseParser } from 'acorn-loose'"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "// import jsxPlugin from 'acorn-jsx'"
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": "import validators from './rules/index.js'"
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": "import { parseAndAggregate } from './parser.js'"
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "const parser = Parser"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "  .extend"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "  // jsxPlugin()"
      },
      {
        "added": true,
        "lineNumber": 13,
        "line": "  ()"
      },
      {
        "added": true,
        "lineNumber": 14,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 15,
        "line": "export function generateAST(fileContent) {"
      },
      {
        "added": true,
        "lineNumber": 16,
        "line": "  return parser.parse(fileContent, {"
      },
      {
        "added": true,
        "lineNumber": 17,
        "line": "    sourceType: 'module',"
      },
      {
        "added": true,
        "lineNumber": 18,
        "line": "    locations: true"
      },
      {
        "added": true,
        "lineNumber": 19,
        "line": "  })"
      },
      {
        "added": true,
        "lineNumber": 20,
        "line": "}"
      },
      {
        "added": true,
        "lineNumber": 21,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 22,
        "line": "function aggregateComments(astNode) {"
      },
      {
        "added": true,
        "lineNumber": 23,
        "line": "  const comments = []"
      },
      {
        "added": true,
        "lineNumber": 24,
        "line": "  for (let validator of validators) {"
      },
      {
        "added": true,
        "lineNumber": 25,
        "line": "    const comment = validator(astNode)"
      },
      {
        "added": true,
        "lineNumber": 26,
        "line": "    if (comment) {"
      },
      {
        "added": true,
        "lineNumber": 27,
        "line": "      comments.push(comment)"
      },
      {
        "added": true,
        "lineNumber": 28,
        "line": "    }"
      },
      {
        "added": true,
        "lineNumber": 29,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 30,
        "line": "  return comments"
      },
      {
        "added": true,
        "lineNumber": 31,
        "line": "}"
      },
      {
        "added": true,
        "lineNumber": 32,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 33,
        "line": "export function parseForIssues(astDocument) {"
      },
      {
        "added": true,
        "lineNumber": 34,
        "line": "  return parseAndAggregate(astDocument, aggregateComments)"
      },
      {
        "added": true,
        "lineNumber": 35,
        "line": "}"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/parser.js",
    "afterName": "functions/createReview/astParsing/parser.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "// The properties in the AST tree that the parsing algorithm should walk through to recurse through the whole tree"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": "export const AST_PARSING_PROPS = ["
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "  'body',"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "  'declarations',"
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": "  'init',"
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": "  'expression',"
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": "  'argument',"
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": "  'arguments',"
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "  'children'"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "]"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 13,
        "line": "export function parseAndAggregate(astDocument, aggrFunc) {"
      },
      {
        "added": true,
        "lineNumber": 14,
        "line": "  let aggregatedData = aggrFunc(astDocument)"
      },
      {
        "added": true,
        "lineNumber": 15,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 16,
        "line": "  if (typeof astDocument === 'object' && astDocument !== null) {"
      },
      {
        "added": true,
        "lineNumber": 17,
        "line": "    for (let prop of AST_PARSING_PROPS) {"
      },
      {
        "added": true,
        "lineNumber": 18,
        "line": "      if (prop in astDocument && Array.isArray(astDocument[prop])) {"
      },
      {
        "added": true,
        "lineNumber": 19,
        "line": "        for (let el of astDocument[prop]) {"
      },
      {
        "added": true,
        "lineNumber": 20,
        "line": "          const newAggrData = parseAndAggregate(el, aggrFunc)"
      },
      {
        "added": true,
        "lineNumber": 21,
        "line": "          aggregatedData = aggregatedData.concat(newAggrData)"
      },
      {
        "added": true,
        "lineNumber": 22,
        "line": "        }"
      },
      {
        "added": true,
        "lineNumber": 23,
        "line": "      } else if (prop in astDocument) {"
      },
      {
        "added": true,
        "lineNumber": 24,
        "line": "        const newAggrData = parseAndAggregate(astDocument[prop], aggrFunc)"
      },
      {
        "added": true,
        "lineNumber": 25,
        "line": "        aggregatedData = aggregatedData.concat(newAggrData)"
      },
      {
        "added": true,
        "lineNumber": 26,
        "line": "      }"
      },
      {
        "added": true,
        "lineNumber": 27,
        "line": "    }"
      },
      {
        "added": true,
        "lineNumber": 28,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 29,
        "line": "  return aggregatedData"
      },
      {
        "added": true,
        "lineNumber": 30,
        "line": "}"
      },
      {
        "added": true,
        "lineNumber": 31,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 32,
        "line": "export function findChildNode(astDocument, boolFunction) {"
      },
      {
        "added": true,
        "lineNumber": 33,
        "line": "  if (typeof astDocument === 'object' && astDocument !== null) {"
      },
      {
        "added": true,
        "lineNumber": 34,
        "line": "    for (let prop of AST_PARSING_PROPS) {"
      },
      {
        "added": true,
        "lineNumber": 35,
        "line": "      if (prop in astDocument && Array.isArray(astDocument[prop])) {"
      },
      {
        "added": true,
        "lineNumber": 36,
        "line": "        for (let el of astDocument[prop]) {"
      },
      {
        "added": true,
        "lineNumber": 37,
        "line": "          console.log("
      },
      {
        "added": true,
        "lineNumber": 38,
        "line": "            'Evaluating child 1',"
      },
      {
        "added": true,
        "lineNumber": 39,
        "line": "            prop,"
      },
      {
        "added": true,
        "lineNumber": 40,
        "line": "            '->',"
      },
      {
        "added": true,
        "lineNumber": 41,
        "line": "            el.type,"
      },
      {
        "added": true,
        "lineNumber": 42,
        "line": "            boolFunction(el)"
      },
      {
        "added": true,
        "lineNumber": 43,
        "line": "          )"
      },
      {
        "added": true,
        "lineNumber": 44,
        "line": "          if (boolFunction(el)) {"
      },
      {
        "added": true,
        "lineNumber": 45,
        "line": "            return el"
      },
      {
        "added": true,
        "lineNumber": 46,
        "line": "          }"
      },
      {
        "added": true,
        "lineNumber": 47,
        "line": "          const matchingChildNode = findChildNode(el, boolFunction)"
      },
      {
        "added": true,
        "lineNumber": 48,
        "line": "          if (matchingChildNode) {"
      },
      {
        "added": true,
        "lineNumber": 49,
        "line": "            return matchingChildNode"
      },
      {
        "added": true,
        "lineNumber": 50,
        "line": "          }"
      },
      {
        "added": true,
        "lineNumber": 51,
        "line": "        }"
      },
      {
        "added": true,
        "lineNumber": 52,
        "line": "      } else if (prop in astDocument) {"
      },
      {
        "added": true,
        "lineNumber": 53,
        "line": "        console.log("
      },
      {
        "added": true,
        "lineNumber": 54,
        "line": "          'Evaluating child 2',"
      },
      {
        "added": true,
        "lineNumber": 55,
        "line": "          prop,"
      },
      {
        "added": true,
        "lineNumber": 56,
        "line": "          '->',"
      },
      {
        "added": true,
        "lineNumber": 57,
        "line": "          astDocument[prop].type,"
      },
      {
        "added": true,
        "lineNumber": 58,
        "line": "          boolFunction(astDocument[prop])"
      },
      {
        "added": true,
        "lineNumber": 59,
        "line": "        )"
      },
      {
        "added": true,
        "lineNumber": 60,
        "line": "        if (boolFunction(astDocument[prop])) {"
      },
      {
        "added": true,
        "lineNumber": 61,
        "line": "          return astDocument[prop]"
      },
      {
        "added": true,
        "lineNumber": 62,
        "line": "        }"
      },
      {
        "added": true,
        "lineNumber": 63,
        "line": "        const matchingChildNode = findChildNode(astDocument[prop], boolFunction)"
      },
      {
        "added": true,
        "lineNumber": 64,
        "line": "        if (matchingChildNode) {"
      },
      {
        "added": true,
        "lineNumber": 65,
        "line": "          return matchingChildNode"
      },
      {
        "added": true,
        "lineNumber": 66,
        "line": "        }"
      },
      {
        "added": true,
        "lineNumber": 67,
        "line": "      }"
      },
      {
        "added": true,
        "lineNumber": 68,
        "line": "    }"
      },
      {
        "added": true,
        "lineNumber": 69,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 70,
        "line": "}"
      },
      {
        "added": true,
        "lineNumber": 71,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 72,
        "line": "export function isCall(node, objectName, propertyName) {"
      },
      {
        "added": true,
        "lineNumber": 73,
        "line": "  if ("
      },
      {
        "added": true,
        "lineNumber": 74,
        "line": "    typeof node === 'object' &&"
      },
      {
        "added": true,
        "lineNumber": 75,
        "line": "    node !== null &&"
      },
      {
        "added": true,
        "lineNumber": 76,
        "line": "    node.type == 'CallExpression' &&"
      },
      {
        "added": true,
        "lineNumber": 77,
        "line": "    node.callee &&"
      },
      {
        "added": true,
        "lineNumber": 78,
        "line": "    node.callee.object &&"
      },
      {
        "added": true,
        "lineNumber": 79,
        "line": "    node.callee.property"
      },
      {
        "added": true,
        "lineNumber": 80,
        "line": "  ) {"
      },
      {
        "added": true,
        "lineNumber": 81,
        "line": "    const obj = node.callee.object"
      },
      {
        "added": true,
        "lineNumber": 82,
        "line": "    const prop = node.callee.property"
      },
      {
        "added": true,
        "lineNumber": 83,
        "line": "    if ("
      },
      {
        "added": true,
        "lineNumber": 84,
        "line": "      obj.type == 'Identifier' &&"
      },
      {
        "added": true,
        "lineNumber": 85,
        "line": "      obj.name == objectName &&"
      },
      {
        "added": true,
        "lineNumber": 86,
        "line": "      prop.type == 'Identifier' &&"
      },
      {
        "added": true,
        "lineNumber": 87,
        "line": "      prop.name == propertyName"
      },
      {
        "added": true,
        "lineNumber": 88,
        "line": "    ) {"
      },
      {
        "added": true,
        "lineNumber": 89,
        "line": "      return true"
      },
      {
        "added": true,
        "lineNumber": 90,
        "line": "    }"
      },
      {
        "added": true,
        "lineNumber": 91,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 92,
        "line": "}"
      },
      {
        "added": true,
        "lineNumber": 93,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 94,
        "line": "export function isType(node, type) {"
      },
      {
        "added": true,
        "lineNumber": 95,
        "line": "  if (typeof node === 'object' && node !== null && node.type == type) {"
      },
      {
        "added": true,
        "lineNumber": 96,
        "line": "    return true"
      },
      {
        "added": true,
        "lineNumber": 97,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 98,
        "line": "}"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/rules/J3_no_parse_stringify.js",
    "afterName": "functions/createReview/astParsing/rules/J3_no_parse_stringify.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "import { findChildNode, isCall } from '../parser.js'"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "export default function validator(node) {"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "  if (isCall(node, 'JSON', 'parse')) {"
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": "    const jsonStringifyChildNode = findChildNode(node, childNode =>"
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": "      isCall(childNode, 'JSON', 'stringify')"
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": "    )"
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": "    if (jsonStringifyChildNode) {"
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "      return {"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "        line: node.loc.start.line,"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "        code: 'J3',"
      },
      {
        "added": true,
        "lineNumber": 13,
        "line": "        description:"
      },
      {
        "added": true,
        "lineNumber": 14,
        "line": "          'Do not use JSON.parse(JSON.stringify(obj)) to clone objects because it is slow and resource intensive. Prefer a specialised library like [rfdc](https://github.com/davidmarkclements/rfdc).'"
      },
      {
        "added": true,
        "lineNumber": 15,
        "line": "      }"
      },
      {
        "added": true,
        "lineNumber": 16,
        "line": "    }"
      },
      {
        "added": true,
        "lineNumber": 17,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 18,
        "line": "}"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/rules/J8_no_var.js",
    "afterName": "functions/createReview/astParsing/rules/J8_no_var.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "export default function validator(node) {"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": "  if ("
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "    typeof node === 'object' &&"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "    node !== null &&"
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": "    node.type == 'VariableDeclaration' &&"
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": "    node.kind == 'var'"
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": "  ) {"
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": "    return {"
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "      line: node.loc.start.line,"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "      code: 'J8',"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "      description:"
      },
      {
        "added": true,
        "lineNumber": 13,
        "line": "        'Use let or const instead of var because the scope for let and const is smaller. [Learn more about the difference](https://stackoverflow.com/questions/762011/what-is-the-difference-between-let-and-var).'"
      },
      {
        "added": true,
        "lineNumber": 14,
        "line": "    }"
      },
      {
        "added": true,
        "lineNumber": 15,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 16,
        "line": "}"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/rules/P10.example.js",
    "afterName": "functions/createReview/astParsing/rules/P10.example.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "const myPromise = new Promise((resolve, reject) => {"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": "  setTimeout(() => {"
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "    resolve(\"foo\")"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "  }, 300)"
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": "})"
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": "async function test1() {"
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": "  for(let i = 0 ; i < 10 ; i++) {"
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "    // expect:P10"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "    await myPromise()"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 13,
        "line": "}"
      },
      {
        "added": true,
        "lineNumber": 14,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 15,
        "line": "// function test2() {"
      },
      {
        "added": true,
        "lineNumber": 16,
        "line": "//   [1,2,3].map(async () => await myPromise())"
      },
      {
        "added": true,
        "lineNumber": 17,
        "line": "// }"
      },
      {
        "added": true,
        "lineNumber": 18,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 19,
        "line": "// function test3() {"
      },
      {
        "added": true,
        "lineNumber": 20,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 21,
        "line": "//   [1,2,3].map(async () => await myPromise())"
      },
      {
        "added": true,
        "lineNumber": 22,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 23,
        "line": "// }"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/rules/P10_loop_await.js",
    "afterName": "functions/createReview/astParsing/rules/P10_loop_await.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "import { findChildNode, isType } from '../parser.js'"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "export default function validator(node) {"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "  if (isType(node, 'ForStatement')) {"
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": "    const nestedAwaitExpression = findChildNode(node, childNode =>"
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": "      isType(childNode, 'AwaitExpression')"
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": "    )"
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": "    if (nestedAwaitExpression) {"
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "      return {"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "        line: nestedAwaitExpression.loc.start.line,"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "        code: 'P10',"
      },
      {
        "added": true,
        "lineNumber": 13,
        "line": "        description: `Review instances of awaiting promises in imperative loops (for, while, do/while) or array native methods (forEach, map)."
      },
      {
        "added": true,
        "lineNumber": 14,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 15,
        "line": "        In many cases they are unnecessary as parallel execution is preferred."
      },
      {
        "added": true,
        "lineNumber": 16,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 17,
        "line": "        Prefer using Promise native methods like Promise.all, or Promise.race, or Promise.allSettled or libraries like p-map as recommended next."
      },
      {
        "added": true,
        "lineNumber": 18,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 19,
        "line": "        If serial execution is needed, consider using a library like sindresorhus/p-series."
      },
      {
        "added": true,
        "lineNumber": 20,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 21,
        "line": "        There is also an eslint rule to enforce this which we recommend using.`"
      },
      {
        "added": true,
        "lineNumber": 22,
        "line": "      }"
      },
      {
        "added": true,
        "lineNumber": 23,
        "line": "    }"
      },
      {
        "added": true,
        "lineNumber": 24,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 25,
        "line": "}"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/rules/P11.example.js",
    "afterName": "functions/createReview/astParsing/rules/P11.example.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "// expect:P11"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "Promise.all(myPromises)"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/rules/P11_unbound_promise.js",
    "afterName": "functions/createReview/astParsing/rules/P11_unbound_promise.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "import { isCall } from '../parser.js'"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "export default function validator(node) {"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "  if (isCall(node, 'Promise', 'all')) {"
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": "    return {"
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": "      line: node.loc.start.line,"
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": "      code: 'P11',"
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": "      description:"
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "        'Executing Promise.all(items.map(async => { … })) leads to the creation of an undefined number of Promises, each executing something asynchronous and possibly saturating the event loop and consuming much memory. Recommend using a library like sindresorhus/p-map or sindresorhus/p-all instead.'"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "    }"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 13,
        "line": "}"
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "functions/createReview/astParsing/rules/index.js",
    "afterName": "functions/createReview/astParsing/rules/index.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "// import J3 from './J3_no_parse_stringify.js'"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": "// import J8 from './J8_no_var.js'"
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "import P10 from './P10_loop_await.js'"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": "import P11 from './P11_unbound_promise.js'"
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": "export default ["
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": "  // J3,"
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": "  // J8,"
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "  P10,"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "  P11"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "]"
      }
    ]
  },
  {
    "added": false,
    "deleted": false,
    "beforeName": "package-lock.json",
    "afterName": "package-lock.json",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 14,
        "line": "                \"acorn\": \"^8.10.0\","
      },
      {
        "added": false,
        "lineNumber": 16,
        "line": "                \"probot\": \"^12.3.1\""
      },
      {
        "added": true,
        "lineNumber": 17,
        "line": "                \"probot\": \"^12.3.1\","
      },
      {
        "added": true,
        "lineNumber": 18,
        "line": "                \"yarn\": \"^1.22.19\""
      },
      {
        "added": false,
        "lineNumber": 2545,
        "line": "            \"dev\": true,"
      },
      {
        "added": true,
        "lineNumber": 8397,
        "line": "        \"node_modules/yarn\": {"
      },
      {
        "added": true,
        "lineNumber": 8398,
        "line": "            \"version\": \"1.22.19\","
      },
      {
        "added": true,
        "lineNumber": 8399,
        "line": "            \"resolved\": \"https://registry.npmjs.org/yarn/-/yarn-1.22.19.tgz\","
      },
      {
        "added": true,
        "lineNumber": 8400,
        "line": "            \"integrity\": \"sha512-/0V5q0WbslqnwP91tirOvldvYISzaqhClxzyUKXYxs07yUILIs5jx/k6CFe8bvKSkds5w+eiOqta39Wk3WxdcQ==\","
      },
      {
        "added": true,
        "lineNumber": 8401,
        "line": "            \"hasInstallScript\": true,"
      },
      {
        "added": true,
        "lineNumber": 8402,
        "line": "            \"bin\": {"
      },
      {
        "added": true,
        "lineNumber": 8403,
        "line": "                \"yarn\": \"bin/yarn.js\","
      },
      {
        "added": true,
        "lineNumber": 8404,
        "line": "                \"yarnpkg\": \"bin/yarn.js\""
      },
      {
        "added": true,
        "lineNumber": 8405,
        "line": "            },"
      },
      {
        "added": true,
        "lineNumber": 8406,
        "line": "            \"engines\": {"
      },
      {
        "added": true,
        "lineNumber": 8407,
        "line": "                \"node\": \">=4.0.0\""
      },
      {
        "added": true,
        "lineNumber": 8408,
        "line": "            }"
      },
      {
        "added": true,
        "lineNumber": 8409,
        "line": "        },"
      },
      {
        "added": false,
        "lineNumber": 10560,
        "line": "            \"integrity\": \"sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw==\","
      },
      {
        "added": false,
        "lineNumber": 10561,
        "line": "            \"dev\": true"
      },
      {
        "added": true,
        "lineNumber": 10574,
        "line": "            \"integrity\": \"sha512-F0SAmZ8iUtS//m8DmCTA0jlh6TDKkHQyK6xc6V4KDTyZKA9dnvX9/3sRTVQrWm79glUAZbnmmNcdYwUIHWVybw==\""
      },
      {
        "added": true,
        "lineNumber": 14967,
        "line": "        \"yarn\": {"
      },
      {
        "added": true,
        "lineNumber": 14968,
        "line": "            \"version\": \"1.22.19\","
      },
      {
        "added": true,
        "lineNumber": 14969,
        "line": "            \"resolved\": \"https://registry.npmjs.org/yarn/-/yarn-1.22.19.tgz\","
      },
      {
        "added": true,
        "lineNumber": 14970,
        "line": "            \"integrity\": \"sha512-/0V5q0WbslqnwP91tirOvldvYISzaqhClxzyUKXYxs07yUILIs5jx/k6CFe8bvKSkds5w+eiOqta39Wk3WxdcQ==\""
      },
      {
        "added": true,
        "lineNumber": 14971,
        "line": "        },"
      }
    ]
  },
  {
    "added": false,
    "deleted": false,
    "beforeName": "package.json",
    "afterName": "package.json",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 29,
        "line": "        \"acorn\": \"^8.10.0\","
      }
    ]
  },
  {
    "added": true,
    "deleted": false,
    "beforeName": "tests/astParsing.test.js",
    "afterName": "tests/astParsing.test.js",
    "modifiedLines": [
      {
        "added": true,
        "lineNumber": 2,
        "line": "import { describe, test } from 'node:test'"
      },
      {
        "added": true,
        "lineNumber": 3,
        "line": "import assert from 'node:assert'"
      },
      {
        "added": true,
        "lineNumber": 4,
        "line": "import { readFileSync } from 'fs'"
      },
      {
        "added": true,
        "lineNumber": 5,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 6,
        "line": "import path from 'path'"
      },
      {
        "added": true,
        "lineNumber": 7,
        "line": "import url from 'url'"
      },
      {
        "added": true,
        "lineNumber": 8,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 9,
        "line": "import {"
      },
      {
        "added": true,
        "lineNumber": 10,
        "line": "  parseForIssues,"
      },
      {
        "added": true,
        "lineNumber": 11,
        "line": "  generateAST"
      },
      {
        "added": true,
        "lineNumber": 12,
        "line": "} from '../functions/createReview/astParsing/index.js'"
      },
      {
        "added": true,
        "lineNumber": 13,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 14,
        "line": "const __dirname = path.dirname(url.fileURLToPath(import.meta.url))"
      },
      {
        "added": true,
        "lineNumber": 15,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 16,
        "line": "function parseForExpectedViolations(fileContent) {"
      },
      {
        "added": true,
        "lineNumber": 17,
        "line": "  return fileContent"
      },
      {
        "added": true,
        "lineNumber": 18,
        "line": "    .split('\\n')"
      },
      {
        "added": true,
        "lineNumber": 19,
        "line": "    .map((line, index) => {"
      },
      {
        "added": true,
        "lineNumber": 20,
        "line": "      const match = /\\/\\/\\s*expect\\s*:\\s*(\\w+)/.exec(line)"
      },
      {
        "added": true,
        "lineNumber": 21,
        "line": "      if (match && match[1]) {"
      },
      {
        "added": true,
        "lineNumber": 22,
        "line": "        return {"
      },
      {
        "added": true,
        "lineNumber": 23,
        "line": "          line: index + 2, // assumes the relevant line is +1 of current line."
      },
      {
        "added": true,
        "lineNumber": 24,
        "line": "          code: match[1]"
      },
      {
        "added": true,
        "lineNumber": 25,
        "line": "        }"
      },
      {
        "added": true,
        "lineNumber": 26,
        "line": "      } else {"
      },
      {
        "added": true,
        "lineNumber": 27,
        "line": "        return null"
      },
      {
        "added": true,
        "lineNumber": 28,
        "line": "      }"
      },
      {
        "added": true,
        "lineNumber": 29,
        "line": "    })"
      },
      {
        "added": true,
        "lineNumber": 30,
        "line": "    .filter(match => match !== null)"
      },
      {
        "added": true,
        "lineNumber": 31,
        "line": "}"
      },
      {
        "added": true,
        "lineNumber": 32,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 33,
        "line": "function removeDescription(violation) {"
      },
      {
        "added": true,
        "lineNumber": 34,
        "line": "  return {"
      },
      {
        "added": true,
        "lineNumber": 35,
        "line": "    line: violation.line,"
      },
      {
        "added": true,
        "lineNumber": 36,
        "line": "    code: violation.code"
      },
      {
        "added": true,
        "lineNumber": 37,
        "line": "  }"
      },
      {
        "added": true,
        "lineNumber": 38,
        "line": "}"
      },
      {
        "added": true,
        "lineNumber": 39,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 40,
        "line": "describe('AST parsing unit testing', () => {"
      },
      {
        "added": true,
        "lineNumber": 41,
        "line": "  test('P10', () => {"
      },
      {
        "added": true,
        "lineNumber": 42,
        "line": "    const jsFile = readFileSync("
      },
      {
        "added": true,
        "lineNumber": 43,
        "line": "      path.join("
      },
      {
        "added": true,
        "lineNumber": 44,
        "line": "        __dirname,"
      },
      {
        "added": true,
        "lineNumber": 45,
        "line": "        '../functions/createReview/astParsing/rules/P10.example.js'"
      },
      {
        "added": true,
        "lineNumber": 46,
        "line": "      ),"
      },
      {
        "added": true,
        "lineNumber": 47,
        "line": "      'utf8'"
      },
      {
        "added": true,
        "lineNumber": 48,
        "line": "    )"
      },
      {
        "added": true,
        "lineNumber": 49,
        "line": "    const ast = generateAST(jsFile)"
      },
      {
        "added": true,
        "lineNumber": 50,
        "line": "    const violations = parseForIssues(ast).map(removeDescription)"
      },
      {
        "added": true,
        "lineNumber": 51,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 52,
        "line": "    const expectedViolations = parseForExpectedViolations(jsFile)"
      },
      {
        "added": true,
        "lineNumber": 53,
        "line": "    assert.notEqual(violations.length, 0)"
      },
      {
        "added": true,
        "lineNumber": 54,
        "line": "    assert.deepEqual(violations, expectedViolations)"
      },
      {
        "added": true,
        "lineNumber": 55,
        "line": "  })"
      },
      {
        "added": true,
        "lineNumber": 56,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 57,
        "line": "  test('P11', () => {"
      },
      {
        "added": true,
        "lineNumber": 58,
        "line": "    const jsFile = readFileSync("
      },
      {
        "added": true,
        "lineNumber": 59,
        "line": "      path.join("
      },
      {
        "added": true,
        "lineNumber": 60,
        "line": "        __dirname,"
      },
      {
        "added": true,
        "lineNumber": 61,
        "line": "        '../functions/createReview/astParsing/rules/P11.example.js'"
      },
      {
        "added": true,
        "lineNumber": 62,
        "line": "      ),"
      },
      {
        "added": true,
        "lineNumber": 63,
        "line": "      'utf8'"
      },
      {
        "added": true,
        "lineNumber": 64,
        "line": "    )"
      },
      {
        "added": true,
        "lineNumber": 65,
        "line": "    const ast = generateAST(jsFile)"
      },
      {
        "added": true,
        "lineNumber": 66,
        "line": "    const violations = parseForIssues(ast).map(removeDescription)"
      },
      {
        "added": true,
        "lineNumber": 67,
        "line": ""
      },
      {
        "added": true,
        "lineNumber": 68,
        "line": "    const expectedViolations = parseForExpectedViolations(jsFile)"
      },
      {
        "added": true,
        "lineNumber": 69,
        "line": "    assert.notEqual(violations.length, 0)"
      },
      {
        "added": true,
        "lineNumber": 70,
        "line": "    assert.deepEqual(violations, expectedViolations)"
      },
      {
        "added": true,
        "lineNumber": 71,
        "line": "  })"
      },
      {
        "added": true,
        "lineNumber": 72,
        "line": "})"
      }
    ]
  }
]